using AmazonGrpcService.Protos;
using AutoMapper;
using CloudinaryDotNet;
using CloudinaryDotNet.Actions;
using Grpc.Net.Client;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using SiteDeals.Core.Model;
using SiteDeals.Core.Services;
using SiteDeals.MVCWebUI.Areas.Identity.Data;
using SiteDeals.MVCWebUI.Models;
using SiteDeals.Repository;
using SiteDeals.Service.Service;

namespace SiteDeals.MVCWebUI.Controllers
{
    public class ProductController : Controller
    {
        private readonly ProductService _productService;
        private readonly UserManager<SiteDealsMVCWebUIUser> _userManager;
        private readonly SignInManager<SiteDealsMVCWebUIUser> _signInManager;

        private AppDbContext _appDbContext;

        [ViewData]
        public int ProductId { get; set; }

        public ProductController(ProductService productService, UserManager<SiteDealsMVCWebUIUser> userManager, AppDbContext appDbContext, SignInManager<SiteDealsMVCWebUIUser> signInManager)
        {
            _productService = productService;
            _userManager = userManager;
            _appDbContext = appDbContext;
            _signInManager = signInManager;
        }
        public async Task<IActionResult> Grid()
        {
            var deneme = await _productService.GetAllAsync();
            var channel = GrpcChannel.ForAddress("http://localhost:5032");
            var greetclient = new Amazon.AmazonClient(channel);
            return View(deneme);
        }

        [Authorize]
        public async Task<int> DownVote(int id)
        {
            var test = _productService.DecreaseLikes(id);
            return test.Result;
        }

        [Authorize]
        public async Task<int> UpVote(int id)
        {
            var test = _productService.IncreaseLikes(id);
            return test.Result;
        }


        // GET: UserController/Create
        [Route("/senin-kampanyan")]
        public ActionResult Create()
        {
            return View();
        }

        [HttpPost]
        [Route("/senin-kampanyan/fotograf-yukle")]
        [Authorize]
        public async Task<ProductImages> UploadPhoto([FromBody] ImageModel image)
        {

            var userId = Convert.ToInt32(_userManager.GetUserId(User));

            Account account = new Account("kampanyanv2-com", "982991424695787", "dxYQDRexpA0hwzU417lSIhsBBL0");
            Cloudinary cloudinary = new Cloudinary(account);

            var uploadParams = new ImageUploadParams()
            {
                File = new FileDescription(image.Url)
            };
            var uploadResult = cloudinary.Upload(uploadParams);

            var productImage = new ProductImages()
            {
                CloudinaryPublicId = uploadResult.PublicId,
                ProductId = null,
                Url = uploadResult.SecureUrl.ToString(),
                CreatedAt = DateTime.Now,
                CreatedBy = userId
            };

            _appDbContext.ProductImages.Add(productImage);
            _appDbContext.SaveChanges();


            return productImage;
        }

        [HttpPost]
        [Route("/senin-kampanyan/fotograf-yukle-form")]
        [Authorize]
        public async Task<ProductImages> UploadPhoto(IFormFile file)
        {
            if (file.Length > 0)
            {
                var userId = Convert.ToInt32(_userManager.GetUserId(User));
                using (var stream = file.OpenReadStream())
                {
                    Account account = new Account("kampanyanv2-com", "982991424695787", "dxYQDRexpA0hwzU417lSIhsBBL0");
                    Cloudinary cloudinary = new Cloudinary(account);

                    var uploadParams = new ImageUploadParams()
                    {
                        File = new FileDescription(file.Name, stream)
                    };
                    var uploadResult = cloudinary.Upload(uploadParams);

                    var productImage = new ProductImages()
                    {
                        CloudinaryPublicId = uploadResult.PublicId,
                        ProductId = null,
                        Url = uploadResult.SecureUrl.ToString(),
                        CreatedAt = DateTime.Now,
                        CreatedBy = userId
                    };

                    _appDbContext.ProductImages.Add(productImage);
                    _appDbContext.SaveChanges();
                    return productImage;
                }
            }
            else
            {
                throw new Exception("dosya bulunamadı");
            }
        }


        [HttpDelete]
        [Route("/senin-kampanyan/fotograf-sil")]
        public async Task<bool> DeletePhoto([FromBody] ImageModel imageModel)
        {
            var userId = Convert.ToInt32(_userManager.GetUserId(User));
            var image = _appDbContext.ProductImages.Where(x => x.Id == imageModel.Id).FirstOrDefault();
            if (image != null && userId == image.CreatedBy)
            {
                _appDbContext.ProductImages.Remove(image);
            }
            else
            {
                throw new Exception("Bir sen mi akıllısın?");
            }
            _appDbContext.SaveChanges();



            return true;
        }


        public async Task<IActionResult> Index(int id)
        {

            var user = await _userManager.GetUserAsync(User);
            var userId = _userManager.GetUserId(User);

            var allProducts = _appDbContext.Products.ToList();
            var product2 = _appDbContext.Products.Where(x => x.Id == 2).FirstOrDefault();

<<<<<<< HEAD
=======
            ProductId = id;

            //ProductLikes pl = new ProductLikes();
            //pl.IpAddress = "1.1.1.1";
            //_appDbContext.Add(pl);
            //_appDbContext.SaveChanges();



>>>>>>> master
            var model = new ProductModel();
            model.Product = await _productService.GetByIdAsync(id).ConfigureAwait(false);
            model.ProductReviews = await _productService.GetProductReviews(model.Product.Id, 1, 10).ConfigureAwait(false);
            model.ProductImages = model.Product.ProductImages?.Select(x => x.CloudinaryPublicId);
            model.DateRelative = GetPrettyDate(model.Product.CreatedAt);

            if (model.ProductReviews is null || model.ProductReviews.Count() == 0)
            {
                model.ProductReviews = new List<ProductReviews>() { new ProductReviews() {
                    ProductId = id
                }};
            }
            else
            {
                foreach (var review in model.ProductReviews)
                {
                    review.DateRelative = GetPrettyDate(review.CreatedAt);
                }

            }


            return View(model);
        }

        public async Task<IActionResult> List()
        {
            var products = await _productService.GetProductsForHome(10).ConfigureAwait(false);
            var model = new List<ProductModel>();
            await foreach (var product in products)
            {
                model.Add(new ProductModel()
                {
                    Product = product,
                    DateRelative = GetPrettyDate(product.CreatedAt)
                });

            }
            return View(model);
        }

        //// https://support.google.com/webmasters/thread/64043955/review-snippets-for-product-pages-with-pagination?hl=en
        //// https://developers.google.com/search/docs/advanced/ecommerce/pagination-and-incremental-page-loading#sequentially
        //public async Task<IActionResult> GetProductReviews(int productId, int page, int count)
        //{
        //    var model = await _productService.GetProductReviewsAsync(productId, page, count).ConfigureAwait(false);
        //    //await foreach (var review in model)
        //    //{
        //    //    review.DateRelative = GetPrettyDate(review.CreatedAt);
        //    //}
        //    return PartialView(model);
        //}

        public async Task<IActionResult> PostComment(int productId, string comment)
        {
            var user = await _userManager.GetUserAsync(User);
            ProductReviews review = new ProductReviews();
            review.ProductId = productId;
            review.Review = comment;
            review.Approved = false;
            review.Username = user.UserName;
            review.UserId = user.Id;
            review.Likes = 0;
            review.IpAddress = Request.HttpContext.Connection.RemoteIpAddress?.MapToIPv4().ToString();
            review.CreatedAt = DateTime.Now;

            _appDbContext.ProductReviews.Add(review);
            _appDbContext.SaveChanges();

            var reviews = await _productService.GetProductReviews(productId, 1, 10).ConfigureAwait(false);

            reviews.Insert(0, review);

            return PartialView("_GetProductReviews", reviews);
        }


        public string GetPrettyDate(DateTime d)
        {
            // 1.
            // Get time span elapsed since the date.
            TimeSpan s = DateTime.Now.Subtract(d);

            // 2.
            // Get total number of days elapsed.
            int dayDiff = (int)s.TotalDays;

            // 3.
            // Get total number of seconds elapsed.
            int secDiff = (int)s.TotalSeconds;

            // 4.
            // Don't allow out of range values.
            if (dayDiff < 0 || dayDiff >= 31)
            {
                return d.ToString("dd.MM.yyyy");
            }

            // 5.
            // Handle same-day times.
            if (dayDiff == 0)
            {
                // A.
                // Less than one minute ago.
                if (secDiff < 60)
                {
                    return "şimdi";
                }
                // B.
                // Less than 2 minutes ago.
                if (secDiff < 120)
                {
                    return "1 dakika önce";
                }
                // C.
                // Less than one hour ago.
                if (secDiff < 3600)
                {
                    return string.Format("{0} dakika önce",
                        Math.Floor((double)secDiff / 60));
                }
                // D.
                // Less than 2 hours ago.
                if (secDiff < 7200)
                {
                    return "1 saat önce";
                }
                // E.
                // Less than one day ago.
                if (secDiff < 86400)
                {
                    return string.Format("{0} saat önce",
                        Math.Floor((double)secDiff / 3600));
                }
            }
            // 6.
            // Handle previous days.
            if (dayDiff == 1)
            {
                return "Dün";
            }
            if (dayDiff < 7)
            {
                return string.Format("{0} gün önce",
                    dayDiff);
            }
            if (dayDiff < 31)
            {
                return string.Format("{0} hafta önce",
                    Math.Ceiling((double)dayDiff / 7));
            }
            return null;
        }

    }
}
// hebele hubele